generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  balance   Float
  color     String
  createdAt DateTime?
  currency  String
  id        Int       @default(autoincrement()) @id
  name      String
  updatedAt DateTime?
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  records   Record[]
}

model Category {
  createdAt   DateTime?
  expenseType String
  icon        String?
  id          Int       @default(autoincrement()) @id
  isVisible   Boolean
  name        String
  updatedAt   DateTime?
  userId      Int?
  user        User?     @relation(fields: [userId], references: [id])
  records     Record[]
}

model Label {
  color        String
  createdAt    DateTime?
  id           Int           @default(autoincrement()) @id
  name         String
  updatedAt    DateTime?
  recordLabels RecordLabel[]
}

model Record {
  accountId    Int
  amount       Float
  categoryId   Int
  createdAt    DateTime?
  description  String?
  expenseType  String
  id           Int           @default(autoincrement()) @id
  timestamp    DateTime
  updatedAt    DateTime?
  account      Account       @relation(fields: [accountId], references: [id])
  category     Category      @relation(fields: [categoryId], references: [id])
  recordLabels RecordLabel[]
}

model RecordLabel {
  id       Int    @default(autoincrement()) @id
  labelId  Int
  recordId Int
  label    Label  @relation(fields: [labelId], references: [id])
  record   Record @relation(fields: [recordId], references: [id])
}

model User {
  createdAt  DateTime?
  email      String     @unique
  id         Int        @default(autoincrement()) @id
  name       String
  password   String
  updatedAt  DateTime?
  accounts   Account[]
  categories Category[]
}

model knex_migrations {
  batch          Int?
  id             Int       @default(autoincrement()) @id
  migration_time DateTime?
  name           String?
}

model knex_migrations_lock {
  index     Int  @default(autoincrement()) @id
  is_locked Int?
}