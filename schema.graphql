### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Account {
  balance: Float!
  color: String!
  createdAt: DateTime!
  currency: String!
  id: Int!
  name: String!
  records(after: RecordWhereUniqueInput, before: RecordWhereUniqueInput, first: Int, last: Int, skip: Int): [Record!]!
  updatedAt: DateTime!
  userId: Int!
}

input AccountWhereUniqueInput {
  id: Int
}

type AuthPayload {
  token: String!
  user: User!
}

type Category {
  createdAt: DateTime
  expenseType: ExpenseType!
  icon: String
  id: Int!
  isVisible: Boolean!
  name: String!
  updatedAt: DateTime!
  userId: Int
}

input CategoryWhereUniqueInput {
  id: Int
}

scalar DateTime

enum ExpenseType {
  IN
  OUT
  TRANSFER
}

type Label {
  color: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  userId: Int!
}

type Mutation {
  createAccount(balance: Float! = 0, color: String!, currency: String!, name: String!): Account!
  createCategory(expenseType: String! = "OUT", icon: String, isVisible: Boolean! = false, name: String!): Category!
  createLabel(color: String!, name: String!): Label!
  createRecord(accountId: Int = 0, amount: Float! = 0, categoryId: Int!, description: String = "", labelIds: [Int!], timestamp: String!): Record!
  login(email: String!, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
}

type Query {
  accounts: [Account!]!
  categories: [Category!]!
  labels: [Label!]!
  me: User
  records(accountId: Int): [Record!]!
}

type Record {
  account: Account!
  accountId: Int!
  amount: Float!
  category: Category!
  categoryId: Int!
  createdAt: DateTime!
  description: String
  expenseType: ExpenseType!
  id: Int!
  recordLabels(after: RecordLabelWhereUniqueInput, before: RecordLabelWhereUniqueInput, first: Int, last: Int, skip: Int): [RecordLabel!]!
  timestamp: DateTime!
  updatedAt: DateTime!
}

type RecordLabel {
  id: Int!
  label: Label!
  labelId: Int!
  record: Record!
  recordId: Int!
}

input RecordLabelWhereUniqueInput {
  id: Int
}

input RecordWhereUniqueInput {
  id: Int
}

type User {
  accounts(after: AccountWhereUniqueInput, before: AccountWhereUniqueInput, first: Int, last: Int, skip: Int): [Account!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, skip: Int): [Category!]!
  email: String!
  id: Int!
  name: String!
  password: String!
}
